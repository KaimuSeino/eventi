datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  userId            String  @id
  firstName         String?
  katakanaFirstName String?
  lastName          String?
  katakanaLastName  String?
  email             String? @unique
  image             String?

  school  String?
  faculty String?
  grade   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Host {
  userId  String  @id
  campany String?
  email   String? @unique
  detail  String? @db.Text
  image   String?
  link    String?
}

model Event {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.Text
  description String?   @db.Text
  imageUrl    String?   @db.Text
  detail      String?   @db.Text
  datetime    DateTime? @db.Date

  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Comment     Comment[]
  UserJoining UserJoining[]
  surveys     Survey[]
  Applicant   Applicant[]

  @@index([categoryId])
  @@fulltext([title])
}

model Applicant {
  id           Int    @id @default(autoincrement())
  userId       String
  name         String
  nameKana     String
  image        String
  email        String @unique
  school       String
  grade        String
  fieldOfStudy String
  prefecture   String

  createdAt DateTime @default(now())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model Form {
  // フォームの一意識別子で、自動でインクリメント（）される。
  id          Int      @id @default(autoincrement())
  // フォームを作成したユーザーのIDを表す。
  userId      String
  createdAt   DateTime @default(now())
  // フォームが公開されているかどうかを表すブール値です。デフォルトはfalseです。
  published   Boolean  @default(false)
  // フォームの名前です。
  name        String
  // フォームの説明です。デフォルトは空文字列です。
  description String   @default("")
  // フォームの内容を表す文字列です。デフォルトは空の配列を表す文字列"[]"です。
  content     String   @default("[]")

  // フォームが訪問された回数です。デフォルトは０です。
  visits      Int @default(0)
  // フォームに対して送信された回数です。デフォルトは０です。
  submissions Int @default(0)

  // フォームを共有するための一意のURLです。デフォルトはUUIDです。
  shareURL        String            @unique @default(uuid())
  // FormモデルとFormSubmissionsモデルの間のリレーションを表します。一つのフォームは複数の提出物を持つことができます。
  FormSubmissions FormSubmissions[]

  @@unique([name, userId])
}

model FormSubmissions {
  // @default(autoincrement())は、新しいエントリがデータベースに追加されるたびに、このフィールドの値が自動的にインクリメントされることを意味します。
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  formId    Int
  form      Form     @relation(fields: [formId], references: [id])

  // 提出物の内容を格納するためのフィールド。このフィールドには、ユーザーがフォームに入力した回答やデータが文字列形式で保存される。
  content String

  @@index([formId])
}

model Category {
  id    String  @id @default(uuid())
  name  String
  event Event[]
}

model Comment {
  id           String  @id @default(uuid())
  content      String  @db.Text
  eventId      String
  event        Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String
  userImage    String? @db.Text
  emailAddress String? @db.Text
  userName     String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model UserJoining {
  id     String @id @default(uuid())
  userId String

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  firstName String?
  lastName  String?

  userImage    String? @db.Text
  emailAddress String? @db.Text

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Survey {
  id           String  @id @default(uuid())
  question     String
  type         Boolean @default(false)
  eventiResume Boolean @default(false)
  position     Int
  isCompleted  Boolean @default(false)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userAnswer UserAnswer[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  selectQuestions SelectQuestion[]

  @@index([eventId])
}

model SelectQuestion {
  id       String @id @default(uuid())
  question String

  position Int

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
}

model UserAnswer {
  id     String @id @default(uuid())
  userId String

  isCreated    Boolean @default(false)
  textAnswer   String?
  selectAnswer Int?

  isCompleted Boolean @default(false)

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([userId, surveyId])
  @@index([surveyId])
}
