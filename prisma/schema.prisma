datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  userId            String  @id
  firstName         String?
  katakanaFirstName String?
  lastName          String?
  katakanaLastName  String?
  email             String? @unique
  image             String?

  school  String?
  faculty String?
  grade   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Host {
  userId  String  @id
  campany String?
  email   String? @unique
  detail  String? @db.Text
  image   String?
  link    String?
}

model Event {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  detail      String? @db.Text

  startDatetime DateTime? @db.Date
  endDatetime   DateTime? @db.Date

  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  surveys   Survey[]
  Applicant Applicant[]

  @@index([categoryId])
  @@fulltext([title])
}

model Applicant {
  id           Int    @id @default(autoincrement())
  userId       String
  name         String
  nameKana     String
  image        String
  email        String
  school       String
  grade        String
  fieldOfStudy String
  prefecture   String

  createdAt DateTime @default(now())

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  isAttendance Boolean @default(false)

  @@index([eventId])
}

model Category {
  id    String  @id @default(uuid())
  name  String
  event Event[]
}

model Survey {
  id           String  @id @default(uuid())
  question     String
  type         Boolean @default(false)
  eventiResume Boolean @default(false)
  position     Int
  isCompleted  Boolean @default(false)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userAnswer UserAnswer[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  selectQuestions SelectQuestion[]

  @@index([eventId])
}

model SelectQuestion {
  id       String @id @default(uuid())
  question String

  position Int

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
}

model UserAnswer {
  id     String @id @default(uuid())
  userId String

  isCreated    Boolean @default(false)
  textAnswer   String?
  selectAnswer Int?

  isCompleted Boolean @default(false)

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([userId, surveyId])
  @@index([surveyId])
}
