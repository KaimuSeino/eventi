datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  userId    String   @id
  firstName String?
  lastName  String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.Text
  description String?   @db.Text
  imageUrl    String?   @db.Text
  // price Float? 
  detail      String?   @db.Text
  datetime    DateTime? @db.Date

  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Comment     Comment[]
  UserJoining UserJoining[]
  surveys     Survey[]

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id    String  @id @default(uuid())
  name  String
  event Event[]
}

model Comment {
  id           String  @id @default(uuid())
  content      String  @db.Text
  eventId      String
  event        Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId       String
  userImage    String? @db.Text
  emailAddress String? @db.Text
  userName     String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model UserJoining {
  id     String @id @default(uuid())
  userId String

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userImage    String? @db.Text
  emailAddress String? @db.Text

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
}

model Survey {
  id           String  @id @default(uuid())
  question     String
  type         Boolean @default(false)
  eventiResume Boolean @default(false)
  position     Int
  isCompleted  Boolean @default(false)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userAnswer UserAnswer[]

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  selectQuestions SelectQuestion[]

  @@index([eventId])
}

model SelectQuestion {
  id       String @id @default(uuid())
  question String

  position Int

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
}

model UserAnswer {
  id     String @id @default(uuid())
  userId String

  isCreated    Boolean @default(false)
  textAnswer   String?
  selectAnswer Int?

  isCompleted Boolean @default(false)

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([userId, surveyId])
  @@index([surveyId])
}
